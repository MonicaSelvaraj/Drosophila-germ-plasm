{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Source for DBSCAN code: https://www.youtube.com/watch?v=5cOhL4B5waU&t=918s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.datasets import make_moons\n",
    "from sklearn.cluster import DBSCAN\n",
    "from sklearn.neighbors import NearestNeighbors\n",
    "from scipy.spatial.distance import euclidean\n",
    "\n",
    "import numpy as np\n",
    "import numpy.matlib\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X, label = make_moons(n_samples=200, noise=0.1,random_state=19)\n",
    "#print(X[:5,])\n",
    "fig, ax = plt.subplots(figsize=(10,8))\n",
    "sctr1 = ax.scatter(X[:,0],X[:,1],s=140,alpha=0.9)\n",
    "len(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Knee of the curve is at index = 162\n",
      "Knee value = [163.           0.26893279]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Using a kNN distance plot to find eps\n",
    "#Using k=12\n",
    "#Source - https://scikit-learn.org/stable/modules/neighbors.html\n",
    "nbrs = NearestNeighbors(n_neighbors=12).fit(X)\n",
    "distances, indices = nbrs.kneighbors(X)\n",
    "#print(distances)\n",
    "sortedDistancesInc = sorted(distances[:,11],reverse=False)\n",
    "plt.plot(list(range(1,len(X)+1)), sortedDistancesInc)\n",
    "#plt.show()\n",
    "\n",
    "#Figuring out how to automatically get epsilon from the graph\n",
    "#The elbow point is the point on the curve with the maximum absolute second derivative \n",
    "#Source: https://dataplatform.cloud.ibm.com/analytics/notebooks/54d79c2a-f155-40ec-93ec-ed05b58afa39/view?access_token=6d8ec910cf2a1b3901c721fcb94638563cd646fe14400fecbb76cea6aaae2fb1\n",
    "\n",
    "x = list(range(1,len(X)+1))\n",
    "y = sortedDistancesInc\n",
    "kNNdata = np.vstack((x,y)).T\n",
    "nPoints = len(x)\n",
    "#print(kNNdata)\n",
    "\n",
    "#Drawing a line from the first point to the last point on the curve \n",
    "firstPoint = kNNdata[0]\n",
    "lastPoint = kNNdata[-1]\n",
    "plt.scatter(firstPoint[0],firstPoint[1], c='blue',s=10)\n",
    "plt.scatter(lastPoint[0],lastPoint[1], c='blue',s=10)\n",
    "lv = lastPoint - firstPoint #Finding a vector between the first and last point\n",
    "lvn = lv/np.linalg.norm(lv)#Normalizing the vector\n",
    "plt.plot([firstPoint[0],lastPoint[0]],[firstPoint[1],lastPoint[1]])\n",
    "#plt.show()\n",
    "\n",
    "#Finding the distance to the line \n",
    "vecFromFirst = kNNdata - firstPoint\n",
    "scalarProduct = np.sum(vecFromFirst * np.matlib.repmat(lvn, nPoints, 1), axis=1)\n",
    "vecFromFirstParallel = np.outer(scalarProduct, lvn)\n",
    "vecToLine = vecFromFirst - vecFromFirstParallel\n",
    "\n",
    "# distance to line is the norm of vecToLine\n",
    "distToLine = np.sqrt(np.sum(vecToLine ** 2, axis=1))\n",
    "\n",
    "# knee/elbow is the point with max distance value\n",
    "idxOfBestPoint = np.argmax(distToLine)\n",
    "\n",
    "print (\"Knee of the curve is at index =\",idxOfBestPoint)\n",
    "print (\"Knee value =\", kNNdata[idxOfBestPoint])\n",
    "\n",
    "plt.scatter(kNNdata[idxOfBestPoint][0],kNNdata[idxOfBestPoint][1])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DBSCAN(algorithm='auto', eps=0.2689327859651778, leaf_size=30,\n",
      "       metric='euclidean', metric_params=None, min_samples=12, n_jobs=None,\n",
      "       p=None)\n"
     ]
    }
   ],
   "source": [
    "#DBSCAN\n",
    "model = DBSCAN(eps=kNNdata[idxOfBestPoint][1],min_samples=12).fit(X)\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0,\n",
       "       0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1,\n",
       "       0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,\n",
       "       0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0,\n",
       "       1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0,\n",
       "       0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n",
       "       1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0,\n",
       "       1, 0])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0,   1,   2,   3,   6,   7,   9,  10,  11,  12,  13,  14,  15,\n",
       "        16,  18,  19,  20,  21,  22,  23,  24,  26,  28,  29,  31,  32,\n",
       "        33,  34,  35,  37,  38,  39,  40,  41,  42,  44,  45,  46,  47,\n",
       "        49,  50,  51,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,\n",
       "        65,  66,  67,  68,  69,  70,  71,  73,  75,  76,  77,  78,  79,\n",
       "        81,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,\n",
       "        95,  96,  98, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112,\n",
       "       113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127,\n",
       "       128, 129, 130, 131, 134, 136, 137, 138, 139, 140, 141, 142, 143,\n",
       "       144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157,\n",
       "       158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\n",
       "       172, 173, 175, 177, 178, 180, 182, 183, 184, 187, 188, 189, 190,\n",
       "       191, 192, 194, 195, 197, 198, 199])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#To know which points are the core points\n",
    "model.core_sample_indices_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "ename": "NameError",
     "evalue": "name 'DBCV' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-8-77386a0a343c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mkmeans_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDBCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkmeans_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdist_function\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0meuclidean\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkmeans_score\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkmeans_labels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'DBCV' is not defined"
     ]
    }
   ],
   "source": [
    "#Visualizing clusters\n",
    "#fig, ax = plt.subplots(figsize=(10,8))\n",
    "#sctr2 = ax.scatter(X[:,0],X[:,1],c=model.labels_,s=140,alpha=0.9,cmap=plt.cm.Set1)\n",
    "#fig.show()\n",
    "\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "kmeans =  KMeans(n_clusters=2)\n",
    "kmeans_labels = kmeans.fit_predict(X)\n",
    "plt.scatter(X[:,0], X[:,1], c=kmeans_labels)\n",
    "plt.show()\n",
    "\n",
    "kmeans_score = DBCV(X, kmeans_labels, dist_function=euclidean)\n",
    "print(kmeans_score)\n",
    "print(kmeans_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 2.81714569e-01  9.10444056e-01]\n",
      " [ 8.38924105e-01 -5.30053378e-01]\n",
      " [ 4.09154736e-01  8.09443517e-01]\n",
      " [-9.84152132e-01  1.31421552e-01]\n",
      " [ 1.15919021e+00  4.91042499e-01]\n",
      " [-9.67034864e-01  9.81273018e-02]\n",
      " [ 9.17391379e-01 -2.33492700e-01]\n",
      " [ 9.78275081e-01  5.01470015e-01]\n",
      " [ 1.85907097e+00  3.30871464e-01]\n",
      " [ 1.28971276e+00 -3.64160764e-01]\n",
      " [ 5.84428413e-01  7.67799476e-01]\n",
      " [-7.30832047e-01  4.56298974e-01]\n",
      " [ 7.94417589e-01  6.12926580e-01]\n",
      " [ 1.79695065e+00 -2.93018722e-02]\n",
      " [ 2.32147899e-01  9.24300964e-01]\n",
      " [ 1.54806066e+00 -3.39771532e-01]\n",
      " [-6.18477556e-01  8.99092698e-01]\n",
      " [-6.58859478e-02  4.56605027e-01]\n",
      " [ 1.11837392e+00 -4.01525312e-01]\n",
      " [ 1.18063952e+00 -2.33470696e-01]\n",
      " [ 1.49243452e-01 -1.28066249e-01]\n",
      " [-3.43639867e-01  8.37080031e-01]\n",
      " [-3.46496873e-01  7.71662626e-01]\n",
      " [ 1.10554355e+00 -3.66008783e-01]\n",
      " [ 1.77313541e+00  2.20647050e-01]\n",
      " [ 1.70382757e-01  7.30566191e-01]\n",
      " [-2.33630869e-01  1.01740159e+00]\n",
      " [ 1.77765377e+00  3.82306966e-01]\n",
      " [ 7.22840616e-01 -3.78990619e-01]\n",
      " [ 1.06124107e+00 -4.22074761e-01]\n",
      " [ 8.81390770e-01 -3.36024229e-02]\n",
      " [-3.39269973e-01  9.07231980e-01]\n",
      " [ 4.87196179e-01  9.17613431e-01]\n",
      " [ 5.07742972e-01  6.91930633e-01]\n",
      " [ 6.46502886e-01  7.49997777e-01]\n",
      " [ 1.91481372e+00  3.38433459e-01]\n",
      " [ 1.12951014e+00  3.36269110e-01]\n",
      " [ 3.09461855e-01 -1.19380361e-01]\n",
      " [-5.15164417e-01  7.88584465e-01]\n",
      " [ 7.51220238e-01 -5.42852616e-01]\n",
      " [ 1.27435393e+00 -4.90628430e-01]\n",
      " [ 9.07497256e-01  1.37175734e-01]\n",
      " [-9.34976907e-01  4.51134853e-01]\n",
      " [ 1.60442635e+00 -4.08584945e-01]\n",
      " [-2.78076901e-01  8.64095352e-01]\n",
      " [ 6.77256855e-01 -3.48885259e-01]\n",
      " [ 9.64398650e-01  3.78846390e-01]\n",
      " [ 1.80012064e+00  2.57766394e-01]\n",
      " [ 1.10609400e+00 -1.08145533e-02]\n",
      " [ 1.50330274e-01  2.07549945e-01]\n",
      " [ 7.58441172e-01 -3.15981629e-01]\n",
      " [ 8.49491194e-01 -4.67679590e-01]\n",
      " [ 2.67211232e-01 -3.95742005e-01]\n",
      " [ 1.98832264e+00 -1.24071427e-01]\n",
      " [ 2.06321875e+00 -7.67316517e-02]\n",
      " [ 9.21506727e-01 -4.92093137e-01]\n",
      " [ 1.91787271e-01 -9.76060743e-02]\n",
      " [ 1.37536098e+00 -2.99750569e-01]\n",
      " [-1.03145147e+00  1.50835667e-01]\n",
      " [-9.98085669e-01  1.66616496e-01]\n",
      " [ 7.11007501e-01 -4.80496835e-01]\n",
      " [ 6.21564717e-02  3.21238638e-01]\n",
      " [ 3.08723567e-01  9.59157093e-01]\n",
      " [ 1.70667440e-01 -3.75379077e-02]\n",
      " [ 6.99711516e-01  8.09784869e-01]\n",
      " [-9.40023394e-01  5.23730261e-01]\n",
      " [-6.26622817e-01  7.41426777e-01]\n",
      " [-1.06499351e+00  2.16361259e-01]\n",
      " [ 7.01949242e-01  5.89121985e-01]\n",
      " [-8.27492399e-01  2.30738787e-01]\n",
      " [ 5.37907661e-01 -5.03666583e-01]\n",
      " [ 7.16740148e-01  8.17543020e-01]\n",
      " [ 8.83262886e-01  1.13308858e-01]\n",
      " [ 7.17386403e-02  2.19313656e-01]\n",
      " [ 2.11374090e+00  5.38851941e-01]\n",
      " [ 1.93429241e+00  3.47896845e-01]\n",
      " [ 8.71826634e-01  5.93309354e-01]\n",
      " [ 1.64909327e+00 -3.25999634e-01]\n",
      " [ 1.91102249e+00  6.34066907e-02]\n",
      " [ 1.68040221e-01 -2.38311133e-01]\n",
      " [-7.36267166e-01  9.51043996e-01]\n",
      " [ 1.10415264e+00 -5.04586010e-01]\n",
      " [-3.97070930e-01  1.08231963e+00]\n",
      " [-1.27720474e-01  9.33783717e-01]\n",
      " [ 1.69827187e+00 -6.62905632e-02]\n",
      " [ 1.66614969e+00 -1.18278227e-01]\n",
      " [ 2.58576299e-01  9.82549519e-01]\n",
      " [ 9.32611783e-01  2.01505345e-01]\n",
      " [ 1.04432541e+00 -4.59045777e-01]\n",
      " [ 9.01205318e-01  3.52599263e-01]\n",
      " [-9.02171166e-01  7.12479147e-01]\n",
      " [-4.73335021e-01  9.01877413e-01]\n",
      " [-1.94960525e-04  9.98399326e-01]\n",
      " [ 3.62085170e-01  8.13342990e-01]\n",
      " [-7.87373871e-01  6.45036646e-01]\n",
      " [ 1.68677015e+00 -3.80182525e-01]\n",
      " [ 3.60087432e-01  1.06137585e+00]\n",
      " [ 2.85840535e-02 -1.32960537e-01]\n",
      " [ 4.73651695e-01 -2.94766313e-01]\n",
      " [-1.03825975e+00 -4.51232806e-02]\n",
      " [ 2.03027244e+00  5.58906938e-01]\n",
      " [ 1.85953758e+00  2.07668729e-01]\n",
      " [ 3.16177556e-01  9.55986443e-01]\n",
      " [-1.06970612e+00  4.71387154e-01]\n",
      " [ 2.26019186e-01  1.01386122e+00]\n",
      " [ 4.40534021e-01 -2.73269706e-01]\n",
      " [ 4.63343062e-01 -3.17886974e-01]\n",
      " [ 1.46548840e-01  4.84263242e-02]\n",
      " [ 1.91907573e+00  1.94347026e-01]\n",
      " [-7.69634974e-01  6.79609239e-01]\n",
      " [-5.12525987e-01  6.81034015e-01]\n",
      " [ 8.63959309e-01  1.56695906e-01]\n",
      " [ 6.52884327e-01 -5.65466015e-01]\n",
      " [ 1.09799392e+00 -4.82593736e-01]\n",
      " [ 5.64459487e-01 -3.63350947e-01]\n",
      " [ 1.75317378e+00 -9.61061337e-02]\n",
      " [ 1.37029309e+00 -1.95206177e-01]\n",
      " [ 8.52279442e-02  1.06797257e+00]\n",
      " [ 7.64275847e-01  7.75467197e-01]\n",
      " [ 5.86898310e-01  8.30183231e-01]\n",
      " [ 4.70898960e-01 -6.69234020e-01]\n",
      " [-8.49875638e-01  4.70087006e-01]\n",
      " [ 8.53527883e-01 -4.38043488e-01]\n",
      " [ 1.75749230e+00 -1.74382024e-01]\n",
      " [ 1.91877898e+00  2.34344957e-01]\n",
      " [-6.91630977e-01  6.68556167e-01]\n",
      " [-1.02614698e+00  2.99792553e-01]\n",
      " [ 4.89998220e-01  8.09777973e-01]\n",
      " [-8.03920364e-01  6.11667154e-01]\n",
      " [-3.75865674e-01  8.37840919e-01]\n",
      " [ 1.91101144e-02  3.16166736e-01]\n",
      " [ 1.75298538e+00  1.76139968e-01]\n",
      " [ 1.94519664e+00  4.57764979e-01]\n",
      " [ 6.31647820e-02  5.31556595e-01]\n",
      " [ 1.24257701e+00 -4.12167882e-01]\n",
      " [-1.31335127e-01  3.11846289e-01]\n",
      " [ 1.18514446e-01  6.17020286e-02]\n",
      " [ 3.47530312e-01 -4.03862976e-01]\n",
      " [ 1.71898995e+00 -5.19388338e-02]\n",
      " [ 1.87280385e+00 -8.89216067e-02]\n",
      " [ 8.65346904e-02 -1.08446878e-01]\n",
      " [ 3.99036756e-02  1.13742982e+00]\n",
      " [-9.49120924e-01  4.14647603e-01]\n",
      " [ 6.64364029e-01 -5.56016890e-01]\n",
      " [ 1.67794606e+00 -2.11835660e-01]\n",
      " [ 8.00914913e-01  5.71138820e-01]\n",
      " [ 2.14318277e-01  1.18281935e+00]\n",
      " [-1.71538779e-02  3.09189745e-01]\n",
      " [ 1.91939489e+00  6.34607642e-02]\n",
      " [-4.20133067e-01  9.01687374e-01]\n",
      " [ 6.23735491e-01  6.93158411e-01]\n",
      " [ 1.91221212e-01 -3.10053225e-01]\n",
      " [ 7.06670811e-02 -5.23268877e-02]\n",
      " [ 1.52231355e+00 -4.44094684e-01]\n",
      " [ 3.69281106e-01 -2.00660744e-01]\n",
      " [ 3.05950835e-01 -1.76371745e-01]\n",
      " [-3.04786297e-02  5.72969174e-01]\n",
      " [ 9.11922443e-01  3.46300191e-01]\n",
      " [ 5.86574246e-01 -3.97795645e-01]\n",
      " [ 1.17649975e+00 -4.28208483e-01]\n",
      " [ 1.50337454e+00 -3.69673057e-01]\n",
      " [ 1.04407970e+00  5.53067481e-01]\n",
      " [ 9.65248990e-01  2.82047827e-01]\n",
      " [ 9.15718150e-02  1.03263694e+00]\n",
      " [ 1.23563502e+00 -4.49032628e-01]\n",
      " [-5.33633393e-01  8.12668516e-01]\n",
      " [ 1.79400878e+00 -2.58621816e-01]\n",
      " [ 1.24881298e-01  3.64564324e-01]\n",
      " [-2.07629568e-01  1.03465823e+00]\n",
      " [-1.17969384e-01  7.81704664e-01]\n",
      " [ 2.43386468e-01  9.02970150e-01]\n",
      " [-1.47728419e-01  1.15128550e+00]\n",
      " [ 3.97402170e-02  1.27351760e-02]\n",
      " [-8.67239841e-01  5.37456953e-01]\n",
      " [-8.49568329e-02  5.37052123e-01]\n",
      " [-9.31366638e-01  6.29593907e-01]\n",
      " [ 1.00174531e+00  3.80066392e-02]\n",
      " [ 8.85522951e-01  3.40571377e-01]\n",
      " [-8.65536351e-01  7.35630625e-01]\n",
      " [ 4.27897469e-01  1.08084422e+00]\n",
      " [ 7.91907322e-01  4.46229222e-01]\n",
      " [ 1.53672078e+00 -5.35309571e-01]\n",
      " [-2.52068165e-02  3.51484683e-01]\n",
      " [ 7.16854681e-02  1.07017727e+00]\n",
      " [-1.01977067e+00  3.97985171e-01]\n",
      " [ 1.09957077e+00  3.80012933e-01]\n",
      " [-1.17450457e+00  3.62294438e-02]\n",
      " [ 4.99866114e-01 -4.15292391e-01]\n",
      " [ 1.29635640e+00 -5.50057093e-01]\n",
      " [ 8.91714614e-01  6.67009267e-01]\n",
      " [ 1.87137062e+00 -1.74169842e-02]\n",
      " [-4.30965176e-01  8.34156844e-01]\n",
      " [ 1.23229816e+00 -6.07764691e-01]\n",
      " [-8.14160192e-01  8.16064583e-01]\n",
      " [-6.42195753e-02  1.02674814e+00]\n",
      " [ 8.00276170e-01  6.85654017e-01]\n",
      " [ 1.58007883e+00 -4.22033969e-01]\n",
      " [-1.02457058e+00  2.12367198e-01]\n",
      " [ 1.77371829e-01  1.87030390e-01]\n",
      " [-9.21240232e-01  1.88708009e-01]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ms12122/Environments/myenv/lib/python3.7/site-packages/sklearn/externals/six.py:31: DeprecationWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n",
      "  \"(https://pypi.org/project/six/).\", DeprecationWarning)\n",
      "/Users/ms12122/Environments/myenv/lib/python3.7/site-packages/sklearn/externals/joblib/__init__.py:15: DeprecationWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.\n",
      "  warnings.warn(msg, category=DeprecationWarning)\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'DBCV' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-23c314125b93>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhdbscan_labels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mhdbscan_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDBCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhdbscan_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdist_function\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0meuclidean\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhdbscan_score\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'DBCV' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import hdbscan\n",
    "print(X)\n",
    "hdbscanner = hdbscan.HDBSCAN()\n",
    "hdbscan_labels = hdbscanner.fit_predict(X)\n",
    "plt.scatter(X[:,0], X[:,1], c=hdbscan_labels)\n",
    "\n",
    "hdbscan_score = DBCV(X, hdbscan_labels, dist_function=euclidean)\n",
    "print(hdbscan_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'DBCV' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-10-ca296116a61a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     25\u001b[0m '''\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m \u001b[0mdbscan_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDBCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabels_\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdist_function\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0meuclidean\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabels_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdbscan_score\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'DBCV' is not defined"
     ]
    }
   ],
   "source": [
    "'''\n",
    "Cluster validation \n",
    "DBCV evaluates the within- and between- cluster desnity connectedness of clustering results \n",
    "by measuring the least dense region inside and cluster and the most dense region between clusters.\n",
    "A relative measure for evaluation of of density-based clustering should be defined by means of densities\n",
    "rather than by distances.\n",
    "\n",
    "Step1: Define all points core distance (APCD) for each object in a cluster\n",
    "\n",
    "Step 2: Define mutual reachability distance (MRD) for every pair of points in a cluster \n",
    "\n",
    "Step 3: Build a fully connected graph G, for each cluster, based on mutual reachability distance\n",
    "\n",
    "Step 4: Find the minimum spanning tree of G\n",
    "\n",
    "Step 5: Using the MST define the density sparseness and density separation of each cluster \n",
    "Density sparseness - maximum edge of the MST - can be interpreted as the area with the lowest density inside the cluster\n",
    "Density separation - minimum MRD between the objects of two clusters - can be interpreted as the maximum density area between the clusters\n",
    "\n",
    "Step 6: Compute the validity index of a cluster (VC)\n",
    "\n",
    "Step 7: Compute the validity index of the clustering solution\n",
    "\n",
    "Note: Distances are Euclidean \n",
    "'''\n",
    "\n",
    "dbscan_score = DBCV(X,model.labels_,dist_function=euclidean)\n",
    "print(model.labels_)\n",
    "print(dbscan_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Implimentation of Density-Based Clustering Validation \"DBCV\"\n",
    "Citation:\n",
    "Moulavi, Davoud, et al. \"Density-based clustering validation.\"\n",
    "Proceedings of the 2014 SIAM International Conference on Data Mining.\n",
    "Society for Industrial and Applied Mathematics, 2014.\n",
    "\"\"\"\n",
    "\n",
    "import numpy as np\n",
    "from scipy.spatial.distance import euclidean, cdist\n",
    "from scipy.sparse.csgraph import minimum_spanning_tree\n",
    "from scipy.sparse import csgraph\n",
    "\n",
    "\n",
    "def DBCV(X, labels, dist_function=euclidean):\n",
    "    \"\"\"\n",
    "    Density Based clustering validation\n",
    "    Args:\n",
    "        X (np.ndarray): ndarray with dimensions [n_samples, n_features]\n",
    "            data to check validity of clustering\n",
    "        labels (np.array): clustering assignments for data X\n",
    "        dist_dunction (func): function to determine distance between objects\n",
    "            func args must be [np.array, np.array] where each array is a point\n",
    "    Returns: cluster_validity (float)\n",
    "        score in range[-1, 1] indicating validity of clustering assignments\n",
    "    \"\"\"\n",
    "    graph = _mutual_reach_dist_graph(X, labels, dist_function)\n",
    "    mst = _mutual_reach_dist_MST(graph)\n",
    "    cluster_validity = _clustering_validity_index(mst, labels)\n",
    "    return cluster_validity\n",
    "\n",
    "\n",
    "def _core_dist(point, neighbors, dist_function):\n",
    "    \"\"\"\n",
    "    Computes the core distance of a point.\n",
    "    Core distance is the inverse density of an object.\n",
    "    Args:\n",
    "        point (np.array): array of dimensions (n_features,)\n",
    "            point to compute core distance of\n",
    "        neighbors (np.ndarray): array of dimensions (n_neighbors, n_features):\n",
    "            array of all other points in object class\n",
    "        dist_dunction (func): function to determine distance between objects\n",
    "            func args must be [np.array, np.array] where each array is a point\n",
    "    Returns: core_dist (float)\n",
    "        inverse density of point\n",
    "    \"\"\"\n",
    "    n_features = np.shape(point)[0]\n",
    "    n_neighbors = np.shape(neighbors)[1]\n",
    "\n",
    "    distance_vector = cdist(point.reshape(1, -1), neighbors)\n",
    "    distance_vector = distance_vector[distance_vector != 0]\n",
    "    numerator = ((1/distance_vector)**n_features).sum()\n",
    "    core_dist = (numerator / (n_neighbors)) ** (-1/n_features)\n",
    "    return core_dist\n",
    "\n",
    "\n",
    "def _mutual_reachability_dist(point_i, point_j, neighbors_i,\n",
    "                              neighbors_j, dist_function):\n",
    "    \"\"\".\n",
    "    Computes the mutual reachability distance between points\n",
    "    Args:\n",
    "        point_i (np.array): array of dimensions (n_features,)\n",
    "            point i to compare to point j\n",
    "        point_j (np.array): array of dimensions (n_features,)\n",
    "            point i to compare to point i\n",
    "        neighbors_i (np.ndarray): array of dims (n_neighbors, n_features):\n",
    "            array of all other points in object class of point i\n",
    "        neighbors_j (np.ndarray): array of dims (n_neighbors, n_features):\n",
    "            array of all other points in object class of point j\n",
    "        dist_dunction (func): function to determine distance between objects\n",
    "            func args must be [np.array, np.array] where each array is a point\n",
    "    Returns: mutual_reachability (float)\n",
    "        mutual reachability between points i and j\n",
    "    \"\"\"\n",
    "    core_dist_i = _core_dist(point_i, neighbors_i, dist_function)\n",
    "    core_dist_j = _core_dist(point_j, neighbors_j, dist_function)\n",
    "    dist = dist_function(point_i, point_j)\n",
    "    mutual_reachability = np.max([core_dist_i, core_dist_j, dist])\n",
    "    return mutual_reachability\n",
    "\n",
    "\n",
    "def _mutual_reach_dist_graph(X, labels, dist_function):\n",
    "    \"\"\"\n",
    "    Computes the mutual reach distance complete graph.\n",
    "    Graph of all pair-wise mutual reachability distances between points\n",
    "    Args:\n",
    "        X (np.ndarray): ndarray with dimensions [n_samples, n_features]\n",
    "            data to check validity of clustering\n",
    "        labels (np.array): clustering assignments for data X\n",
    "        dist_dunction (func): function to determine distance between objects\n",
    "            func args must be [np.array, np.array] where each array is a point\n",
    "    Returns: graph (np.ndarray)\n",
    "        array of dimensions (n_samples, n_samples)\n",
    "        Graph of all pair-wise mutual reachability distances between points.\n",
    "    \"\"\"\n",
    "    n_samples = np.shape(X)[0]\n",
    "    graph = []\n",
    "    counter = 0\n",
    "    for row in range(n_samples):\n",
    "        graph_row = []\n",
    "        for col in range(n_samples):\n",
    "            point_i = X[row]\n",
    "            point_j = X[col]\n",
    "            class_i = labels[row]\n",
    "            class_j = labels[col]\n",
    "            members_i = _get_label_members(X, labels, class_i)\n",
    "            members_j = _get_label_members(X, labels, class_j)\n",
    "            dist = _mutual_reachability_dist(point_i, point_j,\n",
    "                                             members_i, members_j,\n",
    "                                             dist_function)\n",
    "            graph_row.append(dist)\n",
    "        counter += 1\n",
    "        graph.append(graph_row)\n",
    "    graph = np.array(graph)\n",
    "    return graph\n",
    "\n",
    "\n",
    "def _mutual_reach_dist_MST(dist_tree):\n",
    "    \"\"\"\n",
    "    Computes minimum spanning tree of the mutual reach distance complete graph\n",
    "    Args:\n",
    "        dist_tree (np.ndarray): array of dimensions (n_samples, n_samples)\n",
    "            Graph of all pair-wise mutual reachability distances\n",
    "            between points.\n",
    "    Returns: minimum_spanning_tree (np.ndarray)\n",
    "        array of dimensions (n_samples, n_samples)\n",
    "        minimum spanning tree of all pair-wise mutual reachability\n",
    "            distances between points.\n",
    "    \"\"\"\n",
    "    mst = minimum_spanning_tree(dist_tree).toarray()\n",
    "    return mst + np.transpose(mst)\n",
    "\n",
    "\n",
    "def _cluster_density_sparseness(MST, labels, cluster):\n",
    "    \"\"\"\n",
    "    Computes the cluster density sparseness, the minimum density\n",
    "        within a cluster\n",
    "    Args:\n",
    "        MST (np.ndarray): minimum spanning tree of all pair-wise\n",
    "            mutual reachability distances between points.\n",
    "        labels (np.array): clustering assignments for data X\n",
    "        cluster (int): cluster of interest\n",
    "    Returns: cluster_density_sparseness (float)\n",
    "        value corresponding to the minimum density within a cluster\n",
    "    \"\"\"\n",
    "    indices = np.where(labels == cluster)[0]\n",
    "    cluster_MST = MST[indices][:, indices]\n",
    "    cluster_density_sparseness = np.max(cluster_MST)\n",
    "    return cluster_density_sparseness\n",
    "\n",
    "\n",
    "def _cluster_density_separation(MST, labels, cluster_i, cluster_j):\n",
    "    \"\"\"\n",
    "    Computes the density separation between two clusters, the maximum\n",
    "        density between clusters.\n",
    "    Args:\n",
    "        MST (np.ndarray): minimum spanning tree of all pair-wise\n",
    "            mutual reachability distances between points.\n",
    "        labels (np.array): clustering assignments for data X\n",
    "        cluster_i (int): cluster i of interest\n",
    "        cluster_j (int): cluster j of interest\n",
    "    Returns: density_separation (float):\n",
    "        value corresponding to the maximum density between clusters\n",
    "    \"\"\"\n",
    "    indices_i = np.where(labels == cluster_i)[0]\n",
    "    indices_j = np.where(labels == cluster_j)[0]\n",
    "    shortest_paths = csgraph.dijkstra(MST, indices=indices_i)\n",
    "    relevant_paths = shortest_paths[:, indices_j]\n",
    "    density_separation = np.min(relevant_paths)\n",
    "    return density_separation\n",
    "\n",
    "\n",
    "def _cluster_validity_index(MST, labels, cluster):\n",
    "    \"\"\"\n",
    "    Computes the validity of a cluster (validity of assignmnets)\n",
    "    Args:\n",
    "        MST (np.ndarray): minimum spanning tree of all pair-wise\n",
    "            mutual reachability distances between points.\n",
    "        labels (np.array): clustering assignments for data X\n",
    "        cluster (int): cluster of interest\n",
    "    Returns: cluster_validity (float)\n",
    "        value corresponding to the validity of cluster assignments\n",
    "    \"\"\"\n",
    "    min_density_separation = np.inf\n",
    "    for cluster_j in np.unique(labels):\n",
    "        if cluster_j != cluster:\n",
    "            cluster_density_separation = _cluster_density_separation(MST,\n",
    "                                                                     labels,\n",
    "                                                                     cluster,\n",
    "                                                                     cluster_j)\n",
    "            if cluster_density_separation < min_density_separation:\n",
    "                min_density_separation = cluster_density_separation\n",
    "    cluster_density_sparseness = _cluster_density_sparseness(MST,\n",
    "                                                             labels,\n",
    "                                                             cluster)\n",
    "    numerator = min_density_separation - cluster_density_sparseness\n",
    "    denominator = np.max([min_density_separation, cluster_density_sparseness])\n",
    "    cluster_validity = numerator / denominator\n",
    "    return cluster_validity\n",
    "\n",
    "\n",
    "def _clustering_validity_index(MST, labels):\n",
    "    \"\"\"\n",
    "    Computes the validity of all clustering assignments for a\n",
    "    clustering algorithm\n",
    "    Args:\n",
    "        MST (np.ndarray): minimum spanning tree of all pair-wise\n",
    "            mutual reachability distances between points.\n",
    "        labels (np.array): clustering assignments for data X\n",
    "    Returns: validity_index (float):\n",
    "        score in range[-1, 1] indicating validity of clustering assignments\n",
    "    \"\"\"\n",
    "    n_samples = len(labels)\n",
    "    validity_index = 0\n",
    "    for label in np.unique(labels):\n",
    "        fraction = np.sum(labels == label) / float(n_samples)\n",
    "        cluster_validity = _cluster_validity_index(MST, labels, label)\n",
    "        validity_index += fraction * cluster_validity\n",
    "    return validity_index\n",
    "\n",
    "\n",
    "def _get_label_members(X, labels, cluster):\n",
    "    \"\"\"\n",
    "    Helper function to get samples of a specified cluster.\n",
    "    Args:\n",
    "        X (np.ndarray): ndarray with dimensions [n_samples, n_features]\n",
    "            data to check validity of clustering\n",
    "        labels (np.array): clustering assignments for data X\n",
    "        cluster (int): cluster of interest\n",
    "    Returns: members (np.ndarray)\n",
    "        array of dimensions (n_samples, n_features) of samples of the\n",
    "        specified cluster.\n",
    "    \"\"\"\n",
    "    indices = np.where(labels == cluster)[0]\n",
    "    members = X[indices]\n",
    "    return members"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
